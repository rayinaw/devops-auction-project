trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'e9f24110-6c5e-4bd0-9ba6-1def75060555'
  containerRegistry: 'arcade.azurecr.io'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'arcadeebd9-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

# Build image

stages:
- stage: Build
  displayName: Build stage
  pool:
    vmImage: ubuntu-latest
  jobs:
  - job: Build
    steps:
    - task: Docker@2
      displayName: 'Build and push front end web app image'
      inputs:
        command: 'buildAndPush'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: 'web-app'
        buildContext: .
        Dockerfile: 'frontend/web-app/Dockerfile'
        tags: |
          $(tag)
    - task: Docker@2
      displayName: 'Build and push auction service image'
      inputs:
        command: 'buildAndPush'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: 'auction-svc'
        buildContext: .
        Dockerfile: 'src/AuctionService/Dockerfile'
        tags: |
          $(tag)
    - task: Docker@2
      displayName: 'Build and push search service image'
      inputs:
        command: 'buildAndPush'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: 'search-svc'
        buildContext: .
        Dockerfile: 'src/SearchService/Dockerfile'
        tags: |
          $(tag)
# apply all k8s yml file
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'demoproject.demo-k8s'
    strategy:
      runOnce:
        deploy:
          steps:
          # Apply dev-secrets.yml
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(System.ArtifactsDirectory)/manifests/secret/dev-secrets.yml
                $(System.ArtifactsDirectory)/manifests/K8S/local-pvc.yml
                $(System.ArtifactsDirectory)/manifests/K8S/postgres-depl.yml
                $(System.ArtifactsDirectory)/manifests/K8S/mongo-depl.yml
                $(System.ArtifactsDirectory)/manifests/K8S/auction-depl.yml
                $(System.ArtifactsDirectory)/manifests/K8S/gateway-depl.yml
                $(System.ArtifactsDirectory)/manifests/K8S/search-depl.yml
                $(System.ArtifactsDirectory)/manifests/K8S/identity-depl.yml
                $(System.ArtifactsDirectory)/manifests/K8S/webapp-depl.yml
                $(System.ArtifactsDirectory)/manifests/prod-k8s/ingress-svc.yml
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'demo-cluster-demo-k8s'
              command: 'apply'
              useConfigurationFile: true
              configuration: 'infra/secret'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              azureSubscriptionEndpointForSecrets: 'Azure for Students(e34551b1-e800-461b-85df-03af83f61d5d)'
              azureContainerRegistry: 'arcade.azurecr.io'
              forceUpdate: false
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'demo-cluster-demo-k8s'
              command: 'apply'
              useConfigurationFile: true
              configuration: 'infra/K8S'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              azureSubscriptionEndpointForSecrets: 'Azure for Students(e34551b1-e800-461b-85df-03af83f61d5d)'
              azureContainerRegistry: 'arcade.azurecr.io'
              forceUpdate: false
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'demo-cluster-demo-k8s'
              command: 'apply'
              useConfigurationFile: true
              configuration: 'infra/prod-k8s'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'