# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '8202a4e1-640e-47f1-bb87-c983418579fb'
  imageRepository: 'demoproject'
  containerRegistry: 'arcade.azurecr.io'
  # tag: '$(Build.BuildId)'
  tag: 'latest'
  imagePullSecret: 'arcade72978b55-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    # - task: Docker@2
    #   displayName: 'Build and push front end web app image'
    #   inputs:
    #     command: 'buildAndPush'
    #     containerRegistry: $(dockerRegistryServiceConnection)
    #     repository: 'web-app'
    #     buildContext: .
    #     Dockerfile: 'frontend/web-app/Dockerfile'
    #     tags: |
    #       $(tag)
    # - task: Docker@2
    #   displayName: 'Build and push auction service image'
    #   inputs:
    #     command: 'buildAndPush'
    #     containerRegistry: $(dockerRegistryServiceConnection)
    #     repository: 'auction-svc'
    #     buildContext: .
    #     Dockerfile: 'src/AuctionService/Dockerfile'
    #     tags: |
    #       $(tag)
    # - task: Docker@2
    #   displayName: 'Build and push search service image'
    #   inputs:
    #     command: 'buildAndPush'
    #     containerRegistry: $(dockerRegistryServiceConnection)
    #     repository: 'search-svc'
    #     buildContext: .
    #     Dockerfile: 'src/SearchService/Dockerfile'
    #     tags: |
    #       $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'demoproject-3630.default'
    strategy:
      runOnce:
        deploy:
          steps:
          # - task: KubernetesManifest@0
          #   displayName: Create imagePullSecret
          #   inputs:
          #     action: createSecret
          #     secretName: $(imagePullSecret)
          #     dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/K8S/local-pvc.yml
                $(Pipeline.Workspace)/manifests/K8S/postgres-depl.yml
                $(Pipeline.Workspace)/manifests/K8S/mongo-depl.yml
                $(Pipeline.Workspace)/manifests/K8S/auction-depl.yml
                $(Pipeline.Workspace)/manifests/K8S/gateway-depl.yml
                $(Pipeline.Workspace)/manifests/K8S/search-depl.yml
                $(Pipeline.Workspace)/manifests/K8S/identity-depl.yml
                $(Pipeline.Workspace)/manifests/K8S/webapp-depl.yml
                $(Pipeline.Workspace)/manifests/service.yml
                $(Pipeline.Workspace)/manifests/prod-k8s/ingress-svc.yml
              # imagePullSecrets: |
              #   $(imagePullSecret)
              # containers: |
              #   $(containerRegistry)/$(imageRepository):$(tag)

